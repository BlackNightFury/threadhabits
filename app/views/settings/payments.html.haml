= heading_section :h2, "Payments Settings"
= render layout: "side_bar" do
  = form_for current_person, url: settings_path, method: :put, html: { multipart: true } do |f|
    .form-group
      = f.label :paypal_id, "Paypal email address, This is where funds will be sent to when someone purchases one of your items."
      = f.text_field :paypal_id, class: "form-control input-lg"
    .form-group
      = f.submit "Save Information", class: "btn btn-primary site-btn"
  %hr
  %form#payment-form{:action => "/charge", :method => "post"}
    .form-group
    - if current_person.card.present?
      .card-info
        %label
          = "The seller fee will be billed to : #{current_person.card["brand"]} ending in #{current_person.card["last4"]}"
        .form-group
          %button#load.btn.btn-primary.site-btn.update-btn{:type => "button"} Update Information

    %div{class: "#{current_person.card.present? ? 'hide card-form' : 'card-form' }"}
      %label{:for => "card-element"}
        Credit / Debit card. This card will be charged the 3.5% seller fee only when one of your items have sold.
      #card-element
      #card-errors{:role => "alert"}
      .form-group
        %button#load.btn.btn-primary.site-btn{"data-loading-text" => "<i class='fa fa-spinner fa-spin '></i> Processing", :type => "submit"} Save Information
  .form-group
    - subscription_type = current_person.subscription_type
    - subscription_created_at = current_person.subscription_created_at
    .columns
      .price
        
        %li
          Commission based
        %li.default
          %strong
            3.5%
          %br
          of each sell 
        - unless current_person.active_subscription?
          %li.grey
        = link_to "Select", new_charge_path(subscription_type: 1), class: 'btn btn-primary pay-bill-default'
    .columns
      .price
        
        #exTab1.container
          %ul.nav.nav-pills
            %li.active
              %a{"data-toggle" => "tab", :href => "#1a"} Paid Monthly
            %li
              %a{"data-toggle" => "tab", :href => "#2a"} Paid Annually
          .tab-content
            #1a.tab-pane.monthly.active.text-center
              %strong
                $2
                %sub /mo
              %br
                Paid monthly          
              -# unless current_person.active_subscription?
              = link_to "Pay ($2)", new_charge_path(subscription_type: 2, amount: 2, plan: 'Monthly Plan'), class: 'btn btn-primary pay-bill-monthly'
            #2a.tab-pane.annual.text-center
            
              %strong 
                $9.99 
                %sub Annual
              %br
                Paid Annually
              -# unless current_person.active_subscription?
              = link_to "Pay ($9.99)", new_charge_path(subscription_type: 3, amount: 9.99, plan: 'Annual Plan'), class: 'btn btn-primary pay-bill-annual'
        %h4.text-center
          - if subscription_type == 3 && current_person.active_subscription?
            = "#{((subscription_created_at + 1.year) - DateTime.now).to_i/ 1.day} Days remaining "
          - if subscription_type == 2 && current_person.active_subscription?
            = "#{((subscription_created_at + 1.month) - DateTime.now).to_i/ 1.day} Days remaining "

:javascript
  $(document).ready( function() {
    // Create a Stripe client
    var stripe = Stripe('pk_live_2wcgrWtCDfdwPWVp86AVtPaW');

    // Create an instance of Elements
    var elements = stripe.elements();

    // Custom styling can be passed to options when creating an Element.
    // (Note that this demo uses a wider set of styles than the guide below.)
    var style = {
      base: {
        color: '#32325d',
        lineHeight: '24px',
        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
          color: '#aab7c4'
        }
      },
      invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
      }
    };

    // Create an instance of the card Element
    var card = elements.create('card', {style: style});

    // Add an instance of the card Element into the `card-element` <div>
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element.
    card.addEventListener('change', function(event) {
      var displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
    });

    // Handle form submission
    var form = document.getElementById('payment-form');
    form.addEventListener('submit', function(event) {
      $('#load').button('loading');
      event.preventDefault();
      stripe.createToken(card).then(function(result) {
        if (result.error) {
          // Inform the user if there was an error
          var errorElement = document.getElementById('card-errors');
          errorElement.textContent = result.error.message;
          $('#load').button('reset');
        } else {
          var saveData = $.ajax({
            type: 'POST',
            url: "/settings/update_card",
            data: { card_token: result.token },
            success: function(resultData) {
              $('#load').button('reset');
              location.reload();
            }
          });
          saveData.error(function() {
            alert("Something went wrong, Please try again");
          });
        }
      });
    });

    $('.update-btn').on('click', function(event){
      $('.card-form').removeClass('hide')
      $(this).hide();
    })
  });
